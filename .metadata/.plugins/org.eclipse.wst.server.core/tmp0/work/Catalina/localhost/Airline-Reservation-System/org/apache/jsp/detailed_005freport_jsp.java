/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-04-11 09:37:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class detailed_005freport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Detailed Report | Admin Panel</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', sans-serif;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            background: #BCEDFF;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            color: #0E4A7B;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .navbar {\r\n");
      out.write("            background: #2D82B5;\r\n");
      out.write("            padding: 15px 20px;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            width: 80%;\r\n");
      out.write("            max-width: 1000px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .navbar a {\r\n");
      out.write("            color: white;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            margin-right: 15px;\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            transition: all 0.3s ease-in-out;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .navbar a:hover {\r\n");
      out.write("            background: rgba(255, 255, 255, 0.25);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .logout-btn {\r\n");
      out.write("            background: #B90E0A;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            border-radius: 6px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: all 0.3s ease-in-out;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .logout-btn:hover {\r\n");
      out.write("            background: #990F02;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 80%;\r\n");
      out.write("            max-width: 1000px;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            padding: 30px;\r\n");
      out.write("            background: white;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1, h2, h3 {\r\n");
      out.write("            color: #015C92;\r\n");
      out.write("            margin-top: 30px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border-bottom: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            background: #3498db;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tr:hover {\r\n");
      out.write("            background: #f1f1f1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .links {\r\n");
      out.write("            margin-top: 30px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .links a {\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            margin-right: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back {\r\n");
      out.write("            background: #2ecc71;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .reports {\r\n");
      out.write("            background: #e67e22;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"navbar\">\r\n");
      out.write("        <div>\r\n");
      out.write("            <a href=\"admindash.jsp\">Admin Dashboard</a>\r\n");
      out.write("            <a href=\"reports.jsp\">Reports</a>\r\n");
      out.write("        </div>\r\n");
      out.write("        <form action=\"logout.jsp\" method=\"post\">\r\n");
      out.write("            <button class=\"logout-btn\" type=\"submit\">Logout</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1>Detailed Report</h1>\r\n");
      out.write("\r\n");
      out.write("        ");

            Connection conn = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;
            int totalBookings = 0;
            int availableSeats = 0;
            double totalRevenue = 0.0;

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/airline", "root", "root");

                // Total Bookings
                stmt = conn.prepareStatement("SELECT COUNT(*) AS total FROM bookings");
                rs = stmt.executeQuery();
                if (rs.next()) {
                    totalBookings = rs.getInt("total");
                }
                rs.close();
                stmt.close();

                // Total Revenue
                stmt = conn.prepareStatement("SELECT SUM(amount_paid) AS revenue FROM payments WHERE payment_status = 'Completed'");
                rs = stmt.executeQuery();
                if (rs.next()) {
                    totalRevenue = rs.getDouble("revenue");
                }
                rs.close();
                stmt.close();

                // Available Seats
                stmt = conn.prepareStatement("SELECT SUM(available_seats) AS seats FROM flights");
                rs = stmt.executeQuery();
                if (rs.next()) {
                    availableSeats = rs.getInt("seats");
                }
                rs.close();
                stmt.close();
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Total Bookings</th>\r\n");
      out.write("                <th>Available Seats</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( totalBookings );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( availableSeats );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("        <h2>Recent Bookings</h2>\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Booking ID</th>\r\n");
      out.write("                <th>User ID</th>\r\n");
      out.write("                <th>Flight ID</th>\r\n");
      out.write("                <th>Seat Number</th>\r\n");
      out.write("                <th>Status</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                stmt = conn.prepareStatement("SELECT * FROM bookings ORDER BY booking_date DESC LIMIT 10");
                rs = stmt.executeQuery();
                while (rs.next()) {
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( rs.getInt("booking_id") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( rs.getInt("user_id") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( rs.getInt("flight_id") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( rs.getInt("seat_number") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( rs.getString("status") );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                }
                rs.close();
                stmt.close();
            
      out.write("\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("        <h2>Recent Payments</h2>\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Payment ID</th>\r\n");
      out.write("                <th>Booking ID</th>\r\n");
      out.write("                <th>Amount Paid</th>\r\n");
      out.write("                <th>Payment Status</th>\r\n");
      out.write("                <th>Transaction Date</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                stmt = conn.prepareStatement("SELECT * FROM payments ORDER BY transaction_date DESC LIMIT 10");
                rs = stmt.executeQuery();
                while (rs.next()) {
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( rs.getInt("payment_id") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( rs.getInt("booking_id") );
      out.write("</td>\r\n");
      out.write("                <td>₹");
      out.print( rs.getDouble("amount_paid") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( rs.getString("payment_status") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( rs.getDate("transaction_date") );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                }
                rs.close();
                stmt.close();
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <h2>Flight-wise Booking Details</h2>\r\n");
      out.write("\r\n");
      out.write("        ");

            stmt = conn.prepareStatement("SELECT DISTINCT flight_id FROM bookings ORDER BY flight_id");
            rs = stmt.executeQuery();
            while (rs.next()) {
                int flightId = rs.getInt("flight_id");

                // Get flight details
                PreparedStatement flightStmt = conn.prepareStatement("SELECT flightnumber, airline_name FROM flights WHERE flight_id = ?");
                flightStmt.setInt(1, flightId);
                ResultSet flightRs = flightStmt.executeQuery();
                String flightNumber = "", airlineName = "";
                if (flightRs.next()) {
                    flightNumber = flightRs.getString("flightnumber");
                    airlineName = flightRs.getString("airline_name");
                }
                flightRs.close();
                flightStmt.close();
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <h3>Flight: ");
      out.print( flightNumber );
      out.write(' ');
      out.write('|');
      out.write(' ');
      out.print( airlineName );
      out.write(" (ID: ");
      out.print( flightId );
      out.write(")</h3>\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Booking ID</th>\r\n");
      out.write("                <th>Passenger Name</th>\r\n");
      out.write("                <th>Seat Number</th>\r\n");
      out.write("                <th>Booking Date</th>\r\n");
      out.write("                <th>Status</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                PreparedStatement bookingStmt = conn.prepareStatement(
                    "SELECT b.booking_id, u.first_name, u.last_name, b.seat_number, b.booking_date, b.status " +
                    "FROM bookings b JOIN user u ON b.user_id = u.user_id WHERE b.flight_id = ?");
                bookingStmt.setInt(1, flightId);
                ResultSet bookingRs = bookingStmt.executeQuery();
                while (bookingRs.next()) {
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( bookingRs.getInt("booking_id") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( bookingRs.getString("first_name") );
      out.write(' ');
      out.print( bookingRs.getString("last_name") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( bookingRs.getInt("seat_number") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( bookingRs.getDate("booking_date") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( bookingRs.getString("status") );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                }
                bookingRs.close();
                bookingStmt.close();
            }
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
      out.write("\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"links\">\r\n");
      out.write("            <a href=\"admindash.jsp\" class=\"back\">Back to Dashboard</a>\r\n");
      out.write("            <a href=\"reports.jsp\" class=\"reports\">View Summary Reports</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
