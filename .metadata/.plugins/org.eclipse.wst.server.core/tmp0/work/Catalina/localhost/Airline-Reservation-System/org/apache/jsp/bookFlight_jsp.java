/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-26 02:05:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import javax.servlet.http.*;

public final class bookFlight_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Book Your Flight Seat</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            background-color: lightblue;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .flight-container {\r\n");
      out.write("            background: white;\r\n");
      out.write("            padding: 30px;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .flight-details {\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .seat-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .row {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .seat {\r\n");
      out.write("            width: 40px;\r\n");
      out.write("            height: 40px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            line-height: 40px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .available { background-color: green; color: white; }\r\n");
      out.write("        .booked { background-color: red; color: white; cursor: not-allowed; }\r\n");
      out.write("        .selected { background-color: orange; color: white; }\r\n");
      out.write("        .window { border: 2px solid blue; }\r\n");
      out.write("        .aisle { width: 30px; background: transparent; }\r\n");
      out.write("\r\n");
      out.write("        .confirm-button {\r\n");
      out.write("            background-color: green;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 15px 30px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            width: auto;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script>\r\n");
      out.write("        let selectedSeats = [];\r\n");
      out.write("\r\n");
      out.write("        function toggleSeat(seatNumber) {\r\n");
      out.write("            let seatElement = document.getElementById(\"seat-\" + seatNumber);\r\n");
      out.write("            if (seatElement.classList.contains(\"booked\")) return;\r\n");
      out.write("\r\n");
      out.write("            if (selectedSeats.includes(seatNumber)) {\r\n");
      out.write("                selectedSeats = selectedSeats.filter(seat => seat !== seatNumber);\r\n");
      out.write("                seatElement.classList.remove(\"selected\");\r\n");
      out.write("                seatElement.classList.add(\"available\");\r\n");
      out.write("            } else {\r\n");
      out.write("                selectedSeats.push(seatNumber);\r\n");
      out.write("                seatElement.classList.remove(\"available\");\r\n");
      out.write("                seatElement.classList.add(\"selected\");\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function confirmBooking() {\r\n");
      out.write("            if (selectedSeats.length === 0) {\r\n");
      out.write("                alert(\"Please select at least one seat!\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            let flightId = \"");
      out.print( request.getParameter("flight_id") != null ? request.getParameter("flight_id") : "" );
      out.write("\";\r\n");
      out.write("            let userId = \"");
      out.print( session.getAttribute("user_id") != null ? session.getAttribute("user_id").toString() : "" );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("            if (flightId === \"\" || userId === \"\") {\r\n");
      out.write("                alert(\"Error: Missing flight ID or user ID. Please try again.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            let selectedSeatsStr = selectedSeats.join(\",\");\r\n");
      out.write("            \r\n");
      out.write("            // Redirecting to payment.jsp with all necessary parameters\r\n");
      out.write("            window.location.href = \"payment.jsp?flight_id=\" + flightId + \"&user_id=\" + userId + \"&seats=\" + encodeURIComponent(selectedSeatsStr);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

    String flightIdParam = request.getParameter("flight_id");
    int flightId = 0;

    if (flightIdParam != null && !flightIdParam.isEmpty()) {
        try {
            flightId = Integer.parseInt(flightIdParam);
        } catch (NumberFormatException e) {
            out.println("<p style='color: red;'>Error: Invalid flight ID.</p>");
            return;
        }
    } else {
        out.println("<p style='color: red;'>Error: Flight ID is missing.</p>");
        return;
    }

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/airline", "root", "root");

        // Get flight details
        pst = con.prepareStatement("SELECT flightnumber, airline_name, source, destination, total_seats FROM flights WHERE flight_id = ?");
        pst.setInt(1, flightId);
        rs = pst.executeQuery();

        String flightNumber = "", airlineName = "", source = "", destination = "";
        int totalSeats = 0;

        if (rs.next()) {
            flightNumber = rs.getString("flightnumber");
            airlineName = rs.getString("airline_name");
            source = rs.getString("source");
            destination = rs.getString("destination");
            totalSeats = rs.getInt("total_seats");
        } else {
            out.println("<p style='color: red;'>Error: Flight not found.</p>");
            return;
        }

        rs.close();
        pst.close();

        // Get booked seats
        Set<Integer> bookedSeats = new HashSet<>();
        pst = con.prepareStatement("SELECT seat_number FROM bookings WHERE flight_id = ?");
        pst.setInt(1, flightId);
        rs = pst.executeQuery();

        while (rs.next()) {
            bookedSeats.add(rs.getInt("seat_number"));
        }

      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class='flight-container'>\r\n");
      out.write("        <div class=\"flight-details\">\r\n");
      out.write("            Flight: ");
      out.print( airlineName );
      out.write(' ');
      out.write('(');
      out.print( flightNumber );
      out.write(") <br>\r\n");
      out.write("            Route: ");
      out.print( source );
      out.write(' ');
      out.write('→');
      out.write(' ');
      out.print( destination );
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class='seat-container'>\r\n");

        int seatsPerRow = 6;
        int rows = totalSeats / seatsPerRow;
        int leftoverSeats = totalSeats % seatsPerRow;

        for (int i = 1; i <= rows; i++) {
            out.println("<div class='row'>");

            for (int j = 1; j <= seatsPerRow; j++) {
                int seatNumber = ((i - 1) * seatsPerRow) + j;
                String seatClass = bookedSeats.contains(seatNumber) ? "seat booked" : "seat available";
                String windowClass = (j == 1 || j == 6) ? " window" : "";

                if (j == 4) out.println("<div class='aisle'></div>"); // Aisle space
                
                out.println("<div id='seat-" + seatNumber + "' class='" + seatClass + windowClass + "' onclick='toggleSeat(" + seatNumber + ")'>" + seatNumber + "</div>");
            }
            out.println("</div>");
        }

        if (leftoverSeats > 0) {
            out.println("<div class='row'>");
            for (int j = 1; j <= leftoverSeats; j++) {
                int seatNumber = (rows * seatsPerRow) + j;
                String seatClass = bookedSeats.contains(seatNumber) ? "seat booked" : "seat available";
                out.println("<div id='seat-" + seatNumber + "' class='" + seatClass + "' onclick='toggleSeat(" + seatNumber + ")'>" + seatNumber + "</div>");
            }
            out.println("</div>");
        }

      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <button class=\"confirm-button\" onclick=\"confirmBooking()\">Proceed to Payment</button>\r\n");
      out.write("\r\n");

    } catch (Exception e) {
        out.println("<p style='color: red;'>Error: " + e.getMessage() + "</p>");
    } finally {
        if (rs != null) rs.close();
        if (pst != null) pst.close();
        if (con != null) con.close();
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
