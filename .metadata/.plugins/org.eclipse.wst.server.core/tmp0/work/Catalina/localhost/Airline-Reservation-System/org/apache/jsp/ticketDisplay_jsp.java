/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-26 02:16:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.*;

public final class ticketDisplay_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String jdbcURL = "jdbc:mysql://localhost:3306/airline";
    String dbUser = "root";
    String dbPass = "root";
    
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        Integer userId = (Integer) session.getAttribute("user_id");
        if (userId == null) {
            response.sendRedirect("login.jsp");
            return;
        }
        
        Integer bookingId = Integer.parseInt(request.getParameter("booking_id"));
        
        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(jdbcURL, dbUser, dbPass);
        
        // Fetch ticket and flight details
        String ticketQuery = "SELECT u.first_name, u.last_name, f.flightnumber, f.source, f.destination, GROUP_CONCAT(t.ticket_number) AS ticket_numbers, GROUP_CONCAT(b.seat_number) AS seat_numbers, COUNT(t.ticket_id) AS total_seats, b.booking_date " +
                             "FROM tickets t " +
                             "INNER JOIN bookings b ON t.booking_id = b.booking_id " +
                             "INNER JOIN flights f ON b.flight_id = f.flight_id " +
                             "INNER JOIN user u ON b.user_id = u.user_id " +
                             "WHERE b.booking_id = ? " +
                             "GROUP BY b.booking_id";
        
        pstmt = conn.prepareStatement(ticketQuery);
        pstmt.setInt(1, bookingId);
        rs = pstmt.executeQuery();
        
        if (rs.next()) {
            String userName = rs.getString("first_name") + " " + rs.getString("last_name");
            String flightNumber = rs.getString("flightnumber");
            String source = rs.getString("source");
            String destination = rs.getString("destination");
            String seatNumbers = rs.getString("seat_numbers");
            String ticketNumbers = rs.getString("ticket_numbers");
            int totalSeats = rs.getInt("total_seats");
            String bookingDate = rs.getString("booking_date");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Flight Ticket</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background-color: #f0f4f8;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        .ticket-container {\r\n");
      out.write("            width: 50%;\r\n");
      out.write("            margin: auto;\r\n");
      out.write("            background: white;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);\r\n");
      out.write("            border: 2px solid #007bff;\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("        .ticket-header {\r\n");
      out.write("            font-size: 24px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            color: #007bff;\r\n");
      out.write("            border-bottom: 2px dashed #007bff;\r\n");
      out.write("            padding-bottom: 10px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .ticket-section {\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .label {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("        .ticket-divider {\r\n");
      out.write("            border-top: 2px dashed #007bff;\r\n");
      out.write("            margin: 10px 0;\r\n");
      out.write("        }\r\n");
      out.write("        .button-container {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .btn {\r\n");
      out.write("            padding: 12px 18px;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            transition: 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("        .btn-print {\r\n");
      out.write("            background-color: #28a745;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("        .btn-print:hover {\r\n");
      out.write("            background-color: #218838;\r\n");
      out.write("        }\r\n");
      out.write("        .btn-back {\r\n");
      out.write("            background-color: #007bff;\r\n");
      out.write("            color: white;\r\n");
      out.write("            margin-left: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .btn-back:hover {\r\n");
      out.write("            background-color: #0056b3;\r\n");
      out.write("        }\r\n");
      out.write("        /* Ticket cut effect */\r\n");
      out.write("        .ticket-container::before,\r\n");
      out.write("        .ticket-container::after {\r\n");
      out.write("            content: \"\";\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            width: 20px;\r\n");
      out.write("            height: 20px;\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            top: 50%;\r\n");
      out.write("            transform: translateY(-50%);\r\n");
      out.write("            border: 2px solid #007bff;\r\n");
      out.write("        }\r\n");
      out.write("        .ticket-container::before {\r\n");
      out.write("            left: -10px;\r\n");
      out.write("        }\r\n");
      out.write("        .ticket-container::after {\r\n");
      out.write("            right: -10px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script>\r\n");
      out.write("        function printTicket() {\r\n");
      out.write("            window.print();\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"ticket-container\">\r\n");
      out.write("        <div class=\"ticket-header\">Boarding Pass</div>\r\n");
      out.write("        <div class=\"ticket-section\">\r\n");
      out.write("            <p><span class=\"label\">Passenger:</span> ");
      out.print( userName );
      out.write("</p>\r\n");
      out.write("            <p><span class=\"label\">Flight:</span> ");
      out.print( flightNumber );
      out.write("</p>\r\n");
      out.write("            <p><span class=\"label\">Route:</span> ");
      out.print( source );
      out.write(' ');
      out.write('➝');
      out.write(' ');
      out.print( destination );
      out.write("</p>\r\n");
      out.write("            <p><span class=\"label\">Seat(s):</span> ");
      out.print( seatNumbers );
      out.write(' ');
      out.write('(');
      out.print( totalSeats );
      out.write(" seat(s))</p>\r\n");
      out.write("            <p><span class=\"label\">Ticket Number(s):</span> ");
      out.print( ticketNumbers );
      out.write("</p>\r\n");
      out.write("            <p><span class=\"label\">Booking Date:</span> ");
      out.print( bookingDate );
      out.write("</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"ticket-divider\"></div>\r\n");
      out.write("        <div class=\"button-container\">\r\n");
      out.write("            <button class=\"btn btn-print\" onclick=\"printTicket()\">Print Ticket</button>\r\n");
      out.write("            <a class=\"btn btn-back\" href=\"passengerdash.jsp\">Back to Dashboard</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");

        } else {
            out.println("<h3 style='color:red;'>No ticket found for this booking.</h3>");
        }
    } catch (Exception e) {
        e.printStackTrace();
        out.println("<h3 style='color:red;'>Error retrieving ticket details.</h3>");
    } finally {
        if (rs != null) rs.close();
        if (pstmt != null) pstmt.close();
        if (conn != null) conn.close();
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
