/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-04-11 09:12:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class manage_005fflights_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Manage Flights</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body { font-family: Arial, sans-serif; margin: 20px; padding: 20px; background: #BCEDFF; color: #0E4A7B; }\r\n");
      out.write("        .container { background: white; padding: 20px; border-radius: 10px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); }\r\n");
      out.write("        h2 { text-align: center; color: #015C92; }\r\n");
      out.write("        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\r\n");
      out.write("        th, td { padding: 10px; border: 1px solid #ddd; text-align: center; }\r\n");
      out.write("        th { background: #007bff; color: white; }\r\n");
      out.write("        .btn { display: inline-block; padding: 10px 15px; margin: 5px; border-radius: 5px; text-decoration: none; color: white; font-weight: bold; text-align: center; border: none; cursor: pointer; }\r\n");
      out.write("        .btn-back { background: #17a2b8; }\r\n");
      out.write("        .btn-add { background: #28a745; }\r\n");
      out.write("        .btn-schedule { background: #28a745; }\r\n");
      out.write("        .btn-search { background: #007bff; padding: 10px 15px; border: none; cursor: pointer; color: white; }\r\n");
      out.write("        .btn:hover { opacity: 0.8; }\r\n");
      out.write("        .filter-section { text-align: center; margin-bottom: 20px; }\r\n");
      out.write("        select, input[type='date'] { padding: 10px; margin: 5px; border-radius: 5px; border: 1px solid #ddd; }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>Manage Flights</h2>\r\n");
      out.write("        \r\n");
      out.write("        <!-- Filter Section -->\r\n");
      out.write("        <form method=\"GET\" action=\"manage_flights.jsp\" class=\"filter-section\">\r\n");
      out.write("            <select name=\"source\">\r\n");
      out.write("                <option value=\"\">Source</option>\r\n");
      out.write("                ");
 
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/airline", "root", "root");
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT DISTINCT source FROM flights");
                    while (rs.next()) { 
      out.write("\r\n");
      out.write("                        <option value=\"");
      out.print( rs.getString("source") );
      out.write("\" \r\n");
      out.write("                            ");
      out.print( (request.getParameter("source") != null && request.getParameter("source").equals(rs.getString("source"))) ? "selected" : "" );
      out.write(">\r\n");
      out.write("                            ");
      out.print( rs.getString("source") );
      out.write("\r\n");
      out.write("                        </option>\r\n");
      out.write("                ");
 } rs.close(); 
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("            \r\n");
      out.write("            <select name=\"destination\">\r\n");
      out.write("                <option value=\"\">Destination</option>\r\n");
      out.write("                ");
 
                    rs = stmt.executeQuery("SELECT DISTINCT destination FROM flights");
                    while (rs.next()) { 
      out.write("\r\n");
      out.write("                        <option value=\"");
      out.print( rs.getString("destination") );
      out.write("\" \r\n");
      out.write("                            ");
      out.print( (request.getParameter("destination") != null && request.getParameter("destination").equals(rs.getString("destination"))) ? "selected" : "" );
      out.write(">\r\n");
      out.write("                            ");
      out.print( rs.getString("destination") );
      out.write("\r\n");
      out.write("                        </option>\r\n");
      out.write("                ");
 } rs.close(); 
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("            \r\n");
      out.write("            <input type=\"date\" name=\"date\" value=\"");
      out.print( request.getParameter("date") != null ? request.getParameter("date") : "" );
      out.write("\">\r\n");
      out.write("            <button type=\"submit\" class=\"btn-search\">Search</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        \r\n");
      out.write("        <a href=\"admindash.jsp\" class=\"btn btn-back\">Back To Dash</a>\r\n");
      out.write("        <a href=\"add_flight.jsp\" class=\"btn btn-add\">Add Flight</a>\r\n");
      out.write("        <a href=\"schedule_flight.jsp\" class=\"btn btn-schedule\">Schedule Flight</a>\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Flight ID</th>\r\n");
      out.write("                <th>Flight Number</th>\r\n");
      out.write("                <th>Airline Name</th>\r\n");
      out.write("                <th>Source</th>\r\n");
      out.write("                <th>Destination</th>\r\n");
      out.write("                <th>Departure Time</th>\r\n");
      out.write("                <th>Arrival Time</th>\r\n");
      out.write("                <th>Total Seats</th>\r\n");
      out.write("                <th>Available Seats</th>\r\n");
      out.write("                <th>Price</th>\r\n");
      out.write("                <th>Actions</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                String sourceFilter = request.getParameter("source");
                String destinationFilter = request.getParameter("destination");
                String dateFilter = request.getParameter("date");

                String query = "SELECT * FROM flights WHERE 1=1"; 
                if (sourceFilter != null && !sourceFilter.isEmpty()) {
                    query += " AND source=?";
                }
                if (destinationFilter != null && !destinationFilter.isEmpty()) {
                    query += " AND destination=?";
                }
                if (dateFilter != null && !dateFilter.isEmpty()) {
                    query += " AND DATE(departure_time) = ?";
                }

                PreparedStatement pstmt = conn.prepareStatement(query);
                int paramIndex = 1;
                if (sourceFilter != null && !sourceFilter.isEmpty()) {
                    pstmt.setString(paramIndex++, sourceFilter);
                }
                if (destinationFilter != null && !destinationFilter.isEmpty()) {
                    pstmt.setString(paramIndex++, destinationFilter);
                }
                if (dateFilter != null && !dateFilter.isEmpty()) {
                    pstmt.setString(paramIndex++, dateFilter);
                }

                rs = pstmt.executeQuery();
                while (rs.next()) { 
      out.write("\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>");
      out.print( rs.getInt("flight_id") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("flightnumber") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("airline_name") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("source") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("destination") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("departure_time") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("arrival_time") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getInt("total_seats") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getInt("available_seats") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getDouble("price") );
      out.write("</td>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <a href=\"edit_flight.jsp?flight_id=");
      out.print( rs.getInt("flight_id") );
      out.write("\" class=\"btn btn-edit\" style=\"background: #ffc107;\">Edit</a>\r\n");
      out.write("                            <a href=\"delete_flight.jsp?flight_id=");
      out.print( rs.getInt("flight_id") );
      out.write("\" class=\"btn btn-delete\" style=\"background: #dc3545;\">Delete</a>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("            ");
 } 
                rs.close();
                pstmt.close();
                stmt.close();
                conn.close();
            
      out.write("\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
