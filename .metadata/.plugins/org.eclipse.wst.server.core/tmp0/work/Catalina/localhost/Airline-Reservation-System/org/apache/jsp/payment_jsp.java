/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-25 10:47:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.*;

public final class payment_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.text.DecimalFormat");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    if (session.getAttribute("user_id") == null) {
        response.sendRedirect("login.jsp"); // Redirect to login if session is lost
        return;
    }

      out.write("\r\n");
      out.write("\r\n");

    // Database connection details
    String jdbcURL = "jdbc:mysql://localhost:3306/airline";
    String dbUser = "root";
    String dbPassword = "root";

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    // Get session user_id
    Integer userId = (Integer) session.getAttribute("user_id");
    String flightIdParam = request.getParameter("flight_id");
    String seatsParam = request.getParameter("seats");

    if (userId == null || flightIdParam == null || seatsParam == null) {
        out.println("<h3>Error: Missing required details!</h3>");
        return;
    }

    int flightId = Integer.parseInt(flightIdParam);
    String[] selectedSeats = seatsParam.split(",");
    int ticketCount = selectedSeats.length;

    String flightNumber = "", source = "", destination = "";
    double pricePerTicket = 0.0;
    
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection(jdbcURL, dbUser, dbPassword);

        // Fetch flight details
        String sql = "SELECT flightnumber, source, destination, price FROM flights WHERE flight_id = ?";
        pst = con.prepareStatement(sql);
        pst.setInt(1, flightId);
        rs = pst.executeQuery();

        if (rs.next()) {
            flightNumber = rs.getString("flightnumber");
            source = rs.getString("source");
            destination = rs.getString("destination");
            pricePerTicket = rs.getDouble("price");
        }

    } catch (Exception e) {
        e.printStackTrace();
        out.println("<h3>Error: " + e.getMessage() + "</h3>");
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Calculate total amount
    double totalAmount = pricePerTicket * ticketCount;
    DecimalFormat df = new DecimalFormat("#,##0.00");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Payment</title>\r\n");
      out.write("    <style>\r\n");
      out.write("    body {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("        background-color: lightblue;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        height: 100vh;\r\n");
      out.write("        flex-direction: column;\r\n");
      out.write("    }\r\n");
      out.write("    .container {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        width: 60%;\r\n");
      out.write("        background-color: #fff;\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("        border-radius: 8px;\r\n");
      out.write("        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);\r\n");
      out.write("    }\r\n");
      out.write("    .flight-details {\r\n");
      out.write("        flex: 1;\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("        background-color: #fff;\r\n");
      out.write("        border-right: 2px solid #ddd;\r\n");
      out.write("    }\r\n");
      out.write("    .payment-box {\r\n");
      out.write("        flex: 1;\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("        background-color: #fff;\r\n");
      out.write("    }\r\n");
      out.write("    h2 {\r\n");
      out.write("        color: #333;\r\n");
      out.write("        margin-bottom: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .info {\r\n");
      out.write("        font-size: 16px;\r\n");
      out.write("        margin-bottom: 8px;\r\n");
      out.write("    }\r\n");
      out.write("    .payment-box input {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        padding: 10px;\r\n");
      out.write("        margin-top: 8px;\r\n");
      out.write("        margin-bottom: 15px;\r\n");
      out.write("        border: 1px solid #ccc;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        font-size: 16px;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-pay {\r\n");
      out.write("        background-color: #007bff;\r\n");
      out.write("        color: white;\r\n");
      out.write("        border: none;\r\n");
      out.write("        padding: 12px;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        font-size: 16px;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        transition: 0.3s;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-pay:hover {\r\n");
      out.write("        background-color: #0056b3;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <!-- Flight & Ticket Details -->\r\n");
      out.write("        <div class=\"flight-details\">\r\n");
      out.write("            <h2>Flight Details</h2>\r\n");
      out.write("            <p class=\"info\"><strong>Flight Number:</strong> ");
      out.print( flightNumber );
      out.write("</p>\r\n");
      out.write("            <p class=\"info\"><strong>From:</strong> ");
      out.print( source );
      out.write("</p>\r\n");
      out.write("            <p class=\"info\"><strong>To:</strong> ");
      out.print( destination );
      out.write("</p>\r\n");
      out.write("            <p class=\"info\"><strong>Tickets:</strong> ");
      out.print( ticketCount );
      out.write("</p>\r\n");
      out.write("            <p class=\"info\"><strong>Seats:</strong> ");
      out.print( seatsParam );
      out.write("</p>\r\n");
      out.write("            <p class=\"info\"><strong>Price Per Ticket:</strong> Rs: ");
      out.print( df.format(pricePerTicket) );
      out.write("</p>\r\n");
      out.write("            <p class=\"info\"><strong>Total Amount:</strong> Rs: ");
      out.print( df.format(totalAmount) );
      out.write("</p>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Payment Form -->\r\n");
      out.write("        <div class=\"payment-box\">\r\n");
      out.write("            <h2>Payment Details</h2>\r\n");
      out.write("            <form action=\"confirmBooking.jsp\" method=\"post\" onsubmit=\"return validatePayment()\">\r\n");
      out.write("                <input type=\"hidden\" name=\"user_id\" value=\"");
      out.print( userId );
      out.write("\">\r\n");
      out.write("                <input type=\"hidden\" name=\"flight_id\" value=\"");
      out.print( flightId );
      out.write("\">\r\n");
      out.write("                <input type=\"hidden\" name=\"seats\" value=\"");
      out.print( seatsParam );
      out.write("\">\r\n");
      out.write("                <input type=\"hidden\" name=\"amount\" value=\"");
      out.print( (int) totalAmount );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("                <label>Card Number</label>\r\n");
      out.write("                <input type=\"text\" name=\"card_number\" maxlength=\"16\" placeholder=\"Enter 16-digit card number\" required oninput=\"this.value=this.value.replace(/[^0-9]/g,'');\">\r\n");
      out.write("\r\n");
      out.write("                <label>ATM PIN</label>\r\n");
      out.write("                <input type=\"password\" name=\"atm_pin\" maxlength=\"4\" placeholder=\"Enter 4-digit PIN\" required oninput=\"this.value=this.value.replace(/[^0-9]/g,'');\">\r\n");
      out.write("\r\n");
      out.write("                <button type=\"submit\" class=\"btn-pay\">Pay Rs: ");
      out.print( df.format(totalAmount) );
      out.write("</button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        function validatePayment() {\r\n");
      out.write("            let cardNumber = document.getElementsByName(\"card_number\")[0].value;\r\n");
      out.write("            let atmPin = document.getElementsByName(\"atm_pin\")[0].value;\r\n");
      out.write("\r\n");
      out.write("            if (cardNumber.length !== 16) {\r\n");
      out.write("                alert(\"Card number must be exactly 16 digits.\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            if (atmPin.length !== 4) {\r\n");
      out.write("                alert(\"ATM PIN must be exactly 4 digits.\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            return true;\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html> \r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
