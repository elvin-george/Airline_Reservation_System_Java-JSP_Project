/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-26 02:16:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.*;

public final class confirmBooking_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    if (session.getAttribute("user_id") == null) {
        response.sendRedirect("login.jsp"); // Redirect if session is lost
        return;
    }

    // Database Connection Details
    String jdbcURL = "jdbc:mysql://localhost:3306/airline";
    String dbUser = "root";
    String dbPassword = "root";

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    // Get session user_id
    Integer userId = (Integer) session.getAttribute("user_id");

    // Get parameters from payment.jsp
    String flightIdParam = request.getParameter("flight_id");
    String seatsParam = request.getParameter("seats");
    String amountParam = request.getParameter("amount");

    // Debugging Info (Print received data)
    out.println("<h3>DEBUG INFO:</h3>");
    out.println("<p>User ID: " + userId + "</p>");
    out.println("<p>Flight ID: " + flightIdParam + "</p>");
    out.println("<p>Seats: " + seatsParam + "</p>");
    out.println("<p>Amount: " + amountParam + "</p>");

    if (userId == null || flightIdParam == null || seatsParam == null || amountParam == null) {
        out.println("<h3 style='color:red;'>Error: Missing booking details. Please try again.</h3>");
        return;
    }

    int flightId = Integer.parseInt(flightIdParam);
    String[] selectedSeats = seatsParam.split(",");
    int totalAmount = Integer.parseInt(amountParam);

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection(jdbcURL, dbUser, dbPassword);
        con.setAutoCommit(false); // Start transaction

        // Insert booking details (Now including seat_number)
        String bookingSql = "INSERT INTO bookings (user_id, flight_id, booking_date, seat_number, status) VALUES (?, ?, NOW(), ?, 'Booked')";
        pst = con.prepareStatement(bookingSql, Statement.RETURN_GENERATED_KEYS);

        for (String seat : selectedSeats) {
            pst.setInt(1, userId);
            pst.setInt(2, flightId);
            pst.setString(3, seat); // Store seat number in `bookings` table
            pst.executeUpdate();
        }

        rs = pst.getGeneratedKeys();
        int bookingId = 0;
        if (rs.next()) {
            bookingId = rs.getInt(1);
        }

        // Insert tickets for each selected seat
        String ticketSql = "INSERT INTO tickets (booking_id, ticket_number, issued_date, status) VALUES (?, ?, NOW(), 'Active')";
        pst = con.prepareStatement(ticketSql);

        for (String seat : selectedSeats) {
            String ticketNumber = UUID.randomUUID().toString().substring(0, 8).toUpperCase(); // Generate unique ticket number
            pst.setInt(1, bookingId);
            pst.setString(2, ticketNumber);
            pst.executeUpdate();
        }

        // Insert payment details
        String paymentSql = "INSERT INTO payments (booking_id, amount_paid, payment_status, transaction_date) VALUES (?, ?, 'Success', NOW())";
        pst = con.prepareStatement(paymentSql);
        pst.setInt(1, bookingId);
        pst.setInt(2, totalAmount);
        pst.executeUpdate();

        // Update available seats in flights table
        String updateSeatsSql = "UPDATE flights SET available_seats = available_seats - ? WHERE flight_id = ?";
        pst = con.prepareStatement(updateSeatsSql);
        pst.setInt(1, selectedSeats.length);
        pst.setInt(2, flightId);
        pst.executeUpdate();

        con.commit(); // Commit transaction

        // Redirect to ticket display page
        response.sendRedirect("ticketDisplay.jsp?booking_id=" + bookingId);

    } catch (Exception e) {
        e.printStackTrace();
        if (con != null) {
            try {
                con.rollback(); // Rollback on error
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
        }
        out.println("<h3 style='color:red;'>Error processing your booking: " + e.getMessage() + "</h3>");
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
